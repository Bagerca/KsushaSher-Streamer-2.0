// –†–µ–ø—Ç–∏–ª–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)
import { Utils } from '../../core/utils.js';

let reptileCanvas;
let reptileCtx;
let reptile = null;
let isReptileActive = false;

export function initReptileFollower() {
    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–≤–∞—Å –¥–ª—è —Ä–µ–ø—Ç–∏–ª–∏–∏
    reptileCanvas = document.createElement('canvas');
    reptileCanvas.className = 'reptile-canvas';
    reptileCanvas.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 9998;
    `;
    document.body.appendChild(reptileCanvas);
    
    reptileCtx = reptileCanvas.getContext('2d');
    resizeReptileCanvas();
    
    window.addEventListener('resize', resizeReptileCanvas);
}

export function activateReptile() {
    if (isReptileActive) return;
    
    isReptileActive = true;
    reptileCanvas.style.display = 'block';
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–ø—Ç–∏–ª–∏—é
    reptile = {
        x: window.innerWidth / 2,
        y: window.innerHeight / 2,
        segments: [],
        targetX: window.innerWidth / 2,
        targetY: window.innerHeight / 2
    };
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Ç–µ–ª–∞
    for (let i = 0; i < 20; i++) {
        reptile.segments.push({
            x: reptile.x,
            y: reptile.y,
            size: Math.max(5, 10 - i * 0.3)
        });
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animateReptile();
    
    console.log('ü¶é –†–µ–ø—Ç–∏–ª–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
}

export function deactivateReptile() {
    isReptileActive = false;
    reptileCanvas.style.display = 'none';
    
    if (reptileCtx) {
        reptileCtx.clearRect(0, 0, reptileCanvas.width, reptileCanvas.height);
    }
}

function resizeReptileCanvas() {
    if (!reptileCanvas) return;
    
    reptileCanvas.width = window.innerWidth;
    reptileCanvas.height = window.innerHeight;
}

function animateReptile() {
    if (!isReptileActive || !reptile) return;
    
    // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å
    reptileCtx.clearRect(0, 0, reptileCanvas.width, reptileCanvas.height);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–∏ (—Å–ª–µ–¥–∏–º –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º)
    reptile.targetX += (mouseX - reptile.targetX) * 0.1;
    reptile.targetY += (mouseY - reptile.targetY) * 0.1;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
    for (let i = 0; i < reptile.segments.length; i++) {
        const segment = reptile.segments[i];
        const target = i === 0 ? reptile : reptile.segments[i - 1];
        
        // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        segment.x += (target.x - segment.x) * 0.2;
        segment.y += (target.y - segment.y) * 0.2;
        
        // –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
        reptileCtx.fillStyle = i === 0 ? '#39ff14' : `hsl(${120 + i * 2}, 100%, 50%)`;
        reptileCtx.beginPath();
        reptileCtx.arc(segment.x, segment.y, segment.size, 0, Math.PI * 2);
        reptileCtx.fill();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ–≤—ã
        if (i === 0) {
            reptileCtx.shadowColor = '#39ff14';
            reptileCtx.shadowBlur = 15;
            reptileCtx.fill();
            reptileCtx.shadowBlur = 0;
        }
    }
    
    requestAnimationFrame(animateReptile);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
let mouseX = 0;
let mouseY = 0;

document.addEventListener('mousemove', (e) => {
    mouseX = e.clientX;
    mouseY = e.clientY;
    
    if (isReptileActive && reptile) {
        reptile.targetX = e.clientX;
        reptile.targetY = e.clientY;
    }
});
